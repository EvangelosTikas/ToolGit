name: ToolGit Nightly

on:
  schedule:
    - cron: "0 3 * * 1"  # every Monday at 03:00 UTC

jobs:
  nightly-test:
    name: Nightly on ${{ matrix.os }} / ${{ matrix.shell }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-13, macos-latest, windows-latest]
        shell: [bash, sh, zsh]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show environment info
        run: |
          echo "üèóÔ∏è OS: $RUNNER_OS"
          echo "Shell matrix: ${{ matrix.shell }}"
          echo "User: $USER"
          echo "PATH: $PATH"
          uname -a || ver
          command -v bash || true
          command -v sh || true
          command -v zsh || true
        shell: bash

      - name: Install dependencies
        run: |
          echo "üß∞ Installing dependencies..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y shellcheck bats zsh
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew update
            brew install shellcheck bats zsh
          else
            choco install shellcheck -y || echo "‚ö†Ô∏è shellcheck may already be installed"
            echo "‚ö†Ô∏è zsh / bats skipped on Windows"
          fi
        shell: bash

      - name: Install ToolGit
        run: make install
        shell: bash

      - name: Run Lint
        run: make lint
        shell: bash

      - name: Run CLI Tests
        run: |
          echo "üîß Running CLI tests on ${{ matrix.os }} / ${{ matrix.shell }}"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            bash -c "make test || echo '‚ö†Ô∏è CLI test failed on Windows Git Bash'"
          else
            make test || echo "‚ö†Ô∏è CLI test failed but continuing"
          fi
        shell: bash

      - name: Run Bats Tests
        run: |
          echo "üß™ Running Bats tests..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "‚ö†Ô∏è Skipping Bats on Windows"
          elif command -v bats &>/dev/null; then
            make test-bats
          else
            echo "‚ö†Ô∏è Bats not available, skipping"
          fi
        shell: bash

      - name: Clean up temp dirs
        run: |
          echo "üßπ Cleaning up..."
          rm -rf /tmp/git-helpers-test.* 2>/dev/null || true
        shell: bash

      - name: Report Success
        if: success()
        run: echo "‚úÖ Nightly run on ${{ matrix.os }} / ${{ matrix.shell }} completed successfully."
        shell: bash

      - name: Report Failure
        if: failure()
        run: echo "‚ùå Nightly run on ${{ matrix.os }} / ${{ matrix.shell }} failed."
        shell: bash
