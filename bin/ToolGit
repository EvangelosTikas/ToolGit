#!/usr/bin/env bash
set -euo pipefail

TOOLGIT_LIB_DIR="${TOOLGIT_LIB_DIR:-$HOME/.local/lib/ToolGit}"
HELPERS_FILE="$TOOLGIT_LIB_DIR/git_helpers.sh"

ensure_helpers_exist() {
    # Ensure the helpers file exists
    if [[ ! -f "$HELPERS_FILE" ]]; then
        mkdir -p "$TOOLGIT_LIB_DIR"
        cp "$(dirname "$0")/git_helpers.sh" "$HELPERS_FILE"
    fi
}

source_helpers() {
    # Source the helpers file into the current shell
    if [[ -f "$HELPERS_FILE" ]]; then
        source "$HELPERS_FILE"
        return 0
    else
        echo "Error: Helpers file not found at $HELPERS_FILE" >&2
        return 1
    fi
}

main() {
    # Ensure helpers exist first
    ensure_helpers_exist

    # Source helpers into current shell
    if ! source_helpers; then
        echo "Error: Failed to source helpers" >&2
        return 1
    fi

    # Handle CLI commands safely
    case "${1:-}" in
        --help)
            echo "ToolGit CLI â€” available commands:"
            declare -F | awk '{print $3}' | grep -E '^gh_'
            return 0
            ;;
        --version)
            [[ -f "$TOOLGIT_LIB_DIR/../VERSION" ]] && cat "$TOOLGIT_LIB_DIR/../VERSION" || echo "dev"
            return 0
            ;;
        *)
            # If the first argument matches a function, call it
            if [[ -n "${1:-}" ]] && declare -f "${1}" > /dev/null 2>&1; then
                "$@"
                return 0
            elif [[ -n "${1:-}" ]]; then
                echo "Error: Unknown command or function '${1}'" >&2
                echo "Use 'ToolGit --help' to see available functions" >&2
                return 1
            else
                echo "ToolGit loaded. Type ToolGit --help to list functions."
                return 0
            fi
            ;;
    esac
}

# Run main function
main "$@"